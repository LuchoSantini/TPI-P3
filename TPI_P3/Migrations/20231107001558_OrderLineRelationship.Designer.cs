// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPI_P3.Data;

#nullable disable

namespace TPI_P3.Migrations
{
    [DbContext(typeof(TPIContext))]
    [Migration("20231107001558_OrderLineRelationship")]
    partial class OrderLineRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("ColourProduct", b =>
                {
                    b.Property<int>("ColoursColourId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ColoursColourId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ColoursProducts", (string)null);
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Zapatilla Nike",
                            Price = 1700m,
                            Status = true
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Zapatilla Adidas",
                            Price = 1600m,
                            Status = true
                        });
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SizesSizeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "SizesSizeId");

                    b.HasIndex("SizesSizeId");

                    b.ToTable("SizesProducts", (string)null);
                });

            modelBuilder.Entity("Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 4,
                            SizeName = "L"
                        },
                        new
                        {
                            SizeId = 6,
                            SizeName = "XXL"
                        },
                        new
                        {
                            SizeId = 7,
                            SizeName = "L"
                        });
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.Colour", b =>
                {
                    b.Property<int>("ColourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColourName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ColourId");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            ColourId = 1,
                            ColourName = "Azul"
                        },
                        new
                        {
                            ColourId = 2,
                            ColourName = "Rojo"
                        });
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcuctId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProcuctId");

                    b.ToTable("ProductLines");
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Seba",
                            Password = "123456",
                            Status = true,
                            UserName = "SebaR",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("ColourProduct", b =>
                {
                    b.HasOne("TPI_P3.Data.Entities.Colour", null)
                        .WithMany()
                        .HasForeignKey("ColoursColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.HasOne("Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Size", null)
                        .WithMany()
                        .HasForeignKey("SizesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.Order", b =>
                {
                    b.HasOne("TPI_P3.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.OrderLine", b =>
                {
                    b.HasOne("TPI_P3.Data.Entities.Order", null)
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "product")
                        .WithMany()
                        .HasForeignKey("ProcuctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("TPI_P3.Data.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
